/* This one reads the PN532 RFID/NFC module via Intel Galileo Gen 2. */

#include<Wire.h>
#include<SPI.h>
#include<Adafruit_PN532.h>
//#include <SoftwareSerial.h>



//const byte rxPin = 2;
//const byte txPin = 3;

// set up a new serial object
//SoftwareSerial mySerial (rxPin, txPin);




// If using the breakout with SPI, define the pins for SPI communication.
#define PN532_SCK  (2)
#define PN532_MOSI (3)
#define PN532_SS   (4)
#define PN532_MISO (5)

// If using the breakout or shield with I2C, define just the pins connected
// to the IRQ and reset lines.  Use the values below (2, 3) for the shield!
#define PN532_IRQ   (2)
#define PN532_RESET (3)  // Not connected by default on the NFC Shield

// Uncomment just _one_ line below depending on how your breakout or shield
// is connected to the Arduino:

// Use this line for a breakout with a software SPI connection (recommended):
//Adafruit_PN532 nfc(PN532_SCK, PN532_MISO, PN532_MOSI, PN532_SS);

// Use this line for a breakout with a hardware SPI connection.  Note that
// the PN532 SCK, MOSI, and MISO pins need to be connected to the Arduino's
// hardware SPI SCK, MOSI, and MISO pins.  On an Arduino Uno these are
// SCK = 13, MOSI = 11, MISO = 12.  The SS line can be any digital IO pin.
//Adafruit_PN532 nfc(PN532_SS);

// Or use this line for a breakout or shield with an I2C connection:
 Adafruit_PN532 nfc(PN532_IRQ, PN532_RESET);

/*#if defined(ARDUINO_ARCH_SAMD)
// for Zero, output on USB Serial console, remove line below if using programming port to program the Zero!
// also change #define in Adafruit_PN532.cpp library file
   #define Serial SerialUSB
#endif
*/



void setup(void) {
 /* #ifndef ESP8266
    while (!Serial); // for Leonardo/Micro/Zero
  #endif*/
  Serial.begin(9600);
 // Serial.println("This is a RFID test");
  Serial1.begin(9600);
  Serial1.println("Serial1 is ready to receive..");
  pinMode(13, OUTPUT);
  //mySerial.begin(115200);
  //mySerial.println("This is Software Serial");
 // Serial1.begin(115200);
 // Serial1.println("Intel Galielo Hardware Serial");

  nfc.begin();

  uint32_t versiondata = nfc.getFirmwareVersion();
  if (! versiondata) {
    Serial.print("Didn't find PN53x board");
   // while (1); // halt
   return;
  }
  // Serial1.print("This is hardware serial");
  // Got ok data, print it out!
  Serial.print("Adafruit PN532 Detected"); Serial.println((versiondata>>24) & 0xFF, HEX); 
  Serial.print("Firmware ver. "); Serial.print((versiondata>>16) & 0xFF, DEC); 
  Serial.print('.'); Serial.println((versiondata>>8) & 0xFF, DEC);
  
  // configure board to read RFID tags
  nfc.SAMConfig();
  
  Serial.println("Waiting for an ISO14443A Card ...");
}

//int value=10;
void loop(void) {
  uint8_t success;
  
  uint8_t uid[9]= {};  // Buffer to store the returned UID
  uint8_t uidLength;                        // Length of the UID (4 or 7 bytes depending on ISO14443A card type)
    //Serial1.write(value++);
   // Serial.write(value++);
    //delay(1000);


  // Wait for an ISO14443A type cards (Mifare, etc.).  When one is found
  // 'uid' will be populated with the UID, and uidLength will indicate
  // if the uid is 4 bytes (Mifare Classic) or 7 bytes (Mifare Ultralight)
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
  
  
   if (success) 
   {  
      digitalWrite(13, HIGH);   // turn the LED on (HIGH is the voltage level)
      delay(1000);              // wait for a second
      digitalWrite(13, LOW);    // turn the LED off by making the voltage LOW
      delay(1500); // 4 seconds delay after a succesful read
    // Display some basic information about the card
      Serial.println("Found an ISO14443A card");
      Serial.print("  UID Length: ");Serial.print(uidLength);//Serial.println(" bytes");
      Serial.print("  UID Value: ");
      for (int i=0; i < uidLength; i++){
        Serial.print (uid[i]);
        Serial1.print (uid[i]);
        //delay(10);
      }
      //nfc.PrintHex(uid, uidLength);    
      Serial.println("");
      
      
      //Serial1.println(uid);
    
      if (uidLength == 4)
        {
            // We probably have a Mifare Classic card ... 
             Serial.println("Seems to be a Mifare Classic card (4 byte UID)");	  
         }
    
      if (uidLength == 7)
        {
            // We probably have a Mifare Ultralight card ...
              Serial.println("Seems to be a Mifare Ultralight tag (7 byte UID)");    
         }
      }
 }


